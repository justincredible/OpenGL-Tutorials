#version 330 core

in vec2 texcoord;
in vec4 shadowcoord;
in vec3 worldpos;
in vec3 normal;
in vec3 eyedir;
in vec3 lightdir;

layout(location = 0) out vec3 color;

uniform sampler2D sample;
uniform sampler2DShadow shadowmap;
uniform vec3 lightpos;

vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

void main()
{
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 1.0f;
	
	vec3 MaterialDiffuseColor = texture( sample, texcoord ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	//float distance = length( lightpos - worldpos );

	vec3 n = normalize( normal );
	vec3 l = normalize( lightdir );
	float cosTheta = clamp( dot( n,l ), 0, 1 );
	
	vec3 E = normalize(eyedir);
	vec3 R = reflect(-l,n);
	float cosAlpha = clamp( dot( E,R ), 0, 1 );
	
	float visibility = 1.0;

	float bias = 0.005;
	
	// float bias = 0.005*tan(acos(cosTheta));
	// bias = clamp(bias, 0, 0.01);

	for (int i=0;i<4;i++){
		int index = i;
		// int index = int(16.0*random(gl_FragCoord.xyy, i))%16;
		// int index = int(16.0*random(floor(worldpos.xyz*1000.0), i))%16;
		
		visibility -= 0.2*(1.0-texture( shadowmap, vec3(shadowcoord.xy + poissonDisk[index]/700.0,  (shadowcoord.z-bias)/shadowcoord.w) ));
	}

	// if ( texture( shadowmap, (shadowcoord.xy/shadowcoord.w) ).z < (shadowcoord.z-bias)/shadowcoord.w )
	// if ( textureProj( shadowmap, shadowcoord.xyw ).z < (shadowcoord.z-bias)/shadowcoord.w )
	
	color = MaterialAmbientColor +
		visibility * MaterialDiffuseColor * LightColor * LightPower * cosTheta +
		visibility * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5);
}
